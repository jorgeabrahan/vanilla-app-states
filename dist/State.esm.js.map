{"version":3,"file":"State.esm.js","sources":["../node_modules/morphdom/dist/morphdom-esm.js","../src/utils/DOMManager/utils.ts","../src/DOMManager.ts","../src/utils/State/utils.ts","../src/State.ts"],"sourcesContent":["var DOCUMENT_FRAGMENT_NODE = 11;\n\nfunction morphAttrs(fromNode, toNode) {\n    var toNodeAttrs = toNode.attributes;\n    var attr;\n    var attrName;\n    var attrNamespaceURI;\n    var attrValue;\n    var fromValue;\n\n    // document-fragments dont have attributes so lets not do anything\n    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {\n      return;\n    }\n\n    // update attributes on original DOM element\n    for (var i = toNodeAttrs.length - 1; i >= 0; i--) {\n        attr = toNodeAttrs[i];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n        attrValue = attr.value;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n            fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);\n\n            if (fromValue !== attrValue) {\n                if (attr.prefix === 'xmlns'){\n                    attrName = attr.name; // It's not allowed to set an attribute with the XMLNS namespace without specifying the `xmlns` prefix\n                }\n                fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);\n            }\n        } else {\n            fromValue = fromNode.getAttribute(attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttribute(attrName, attrValue);\n            }\n        }\n    }\n\n    // Remove any extra attributes found on the original DOM element that\n    // weren't found on the target element.\n    var fromNodeAttrs = fromNode.attributes;\n\n    for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {\n        attr = fromNodeAttrs[d];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n\n            if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {\n                fromNode.removeAttributeNS(attrNamespaceURI, attrName);\n            }\n        } else {\n            if (!toNode.hasAttribute(attrName)) {\n                fromNode.removeAttribute(attrName);\n            }\n        }\n    }\n}\n\nvar range; // Create a range object for efficently rendering strings to elements.\nvar NS_XHTML = 'http://www.w3.org/1999/xhtml';\n\nvar doc = typeof document === 'undefined' ? undefined : document;\nvar HAS_TEMPLATE_SUPPORT = !!doc && 'content' in doc.createElement('template');\nvar HAS_RANGE_SUPPORT = !!doc && doc.createRange && 'createContextualFragment' in doc.createRange();\n\nfunction createFragmentFromTemplate(str) {\n    var template = doc.createElement('template');\n    template.innerHTML = str;\n    return template.content.childNodes[0];\n}\n\nfunction createFragmentFromRange(str) {\n    if (!range) {\n        range = doc.createRange();\n        range.selectNode(doc.body);\n    }\n\n    var fragment = range.createContextualFragment(str);\n    return fragment.childNodes[0];\n}\n\nfunction createFragmentFromWrap(str) {\n    var fragment = doc.createElement('body');\n    fragment.innerHTML = str;\n    return fragment.childNodes[0];\n}\n\n/**\n * This is about the same\n * var html = new DOMParser().parseFromString(str, 'text/html');\n * return html.body.firstChild;\n *\n * @method toElement\n * @param {String} str\n */\nfunction toElement(str) {\n    str = str.trim();\n    if (HAS_TEMPLATE_SUPPORT) {\n      // avoid restrictions on content for things like `<tr><th>Hi</th></tr>` which\n      // createContextualFragment doesn't support\n      // <template> support not available in IE\n      return createFragmentFromTemplate(str);\n    } else if (HAS_RANGE_SUPPORT) {\n      return createFragmentFromRange(str);\n    }\n\n    return createFragmentFromWrap(str);\n}\n\n/**\n * Returns true if two node's names are the same.\n *\n * NOTE: We don't bother checking `namespaceURI` because you will never find two HTML elements with the same\n *       nodeName and different namespace URIs.\n *\n * @param {Element} a\n * @param {Element} b The target element\n * @return {boolean}\n */\nfunction compareNodeNames(fromEl, toEl) {\n    var fromNodeName = fromEl.nodeName;\n    var toNodeName = toEl.nodeName;\n    var fromCodeStart, toCodeStart;\n\n    if (fromNodeName === toNodeName) {\n        return true;\n    }\n\n    fromCodeStart = fromNodeName.charCodeAt(0);\n    toCodeStart = toNodeName.charCodeAt(0);\n\n    // If the target element is a virtual DOM node or SVG node then we may\n    // need to normalize the tag name before comparing. Normal HTML elements that are\n    // in the \"http://www.w3.org/1999/xhtml\"\n    // are converted to upper case\n    if (fromCodeStart <= 90 && toCodeStart >= 97) { // from is upper and to is lower\n        return fromNodeName === toNodeName.toUpperCase();\n    } else if (toCodeStart <= 90 && fromCodeStart >= 97) { // to is upper and from is lower\n        return toNodeName === fromNodeName.toUpperCase();\n    } else {\n        return false;\n    }\n}\n\n/**\n * Create an element, optionally with a known namespace URI.\n *\n * @param {string} name the element name, e.g. 'div' or 'svg'\n * @param {string} [namespaceURI] the element's namespace URI, i.e. the value of\n * its `xmlns` attribute or its inferred namespace.\n *\n * @return {Element}\n */\nfunction createElementNS(name, namespaceURI) {\n    return !namespaceURI || namespaceURI === NS_XHTML ?\n        doc.createElement(name) :\n        doc.createElementNS(namespaceURI, name);\n}\n\n/**\n * Copies the children of one DOM element to another DOM element\n */\nfunction moveChildren(fromEl, toEl) {\n    var curChild = fromEl.firstChild;\n    while (curChild) {\n        var nextChild = curChild.nextSibling;\n        toEl.appendChild(curChild);\n        curChild = nextChild;\n    }\n    return toEl;\n}\n\nfunction syncBooleanAttrProp(fromEl, toEl, name) {\n    if (fromEl[name] !== toEl[name]) {\n        fromEl[name] = toEl[name];\n        if (fromEl[name]) {\n            fromEl.setAttribute(name, '');\n        } else {\n            fromEl.removeAttribute(name);\n        }\n    }\n}\n\nvar specialElHandlers = {\n    OPTION: function(fromEl, toEl) {\n        var parentNode = fromEl.parentNode;\n        if (parentNode) {\n            var parentName = parentNode.nodeName.toUpperCase();\n            if (parentName === 'OPTGROUP') {\n                parentNode = parentNode.parentNode;\n                parentName = parentNode && parentNode.nodeName.toUpperCase();\n            }\n            if (parentName === 'SELECT' && !parentNode.hasAttribute('multiple')) {\n                if (fromEl.hasAttribute('selected') && !toEl.selected) {\n                    // Workaround for MS Edge bug where the 'selected' attribute can only be\n                    // removed if set to a non-empty value:\n                    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n                    fromEl.setAttribute('selected', 'selected');\n                    fromEl.removeAttribute('selected');\n                }\n                // We have to reset select element's selectedIndex to -1, otherwise setting\n                // fromEl.selected using the syncBooleanAttrProp below has no effect.\n                // The correct selectedIndex will be set in the SELECT special handler below.\n                parentNode.selectedIndex = -1;\n            }\n        }\n        syncBooleanAttrProp(fromEl, toEl, 'selected');\n    },\n    /**\n     * The \"value\" attribute is special for the <input> element since it sets\n     * the initial value. Changing the \"value\" attribute without changing the\n     * \"value\" property will have no effect since it is only used to the set the\n     * initial value.  Similar for the \"checked\" attribute, and \"disabled\".\n     */\n    INPUT: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'checked');\n        syncBooleanAttrProp(fromEl, toEl, 'disabled');\n\n        if (fromEl.value !== toEl.value) {\n            fromEl.value = toEl.value;\n        }\n\n        if (!toEl.hasAttribute('value')) {\n            fromEl.removeAttribute('value');\n        }\n    },\n\n    TEXTAREA: function(fromEl, toEl) {\n        var newValue = toEl.value;\n        if (fromEl.value !== newValue) {\n            fromEl.value = newValue;\n        }\n\n        var firstChild = fromEl.firstChild;\n        if (firstChild) {\n            // Needed for IE. Apparently IE sets the placeholder as the\n            // node value and vise versa. This ignores an empty update.\n            var oldValue = firstChild.nodeValue;\n\n            if (oldValue == newValue || (!newValue && oldValue == fromEl.placeholder)) {\n                return;\n            }\n\n            firstChild.nodeValue = newValue;\n        }\n    },\n    SELECT: function(fromEl, toEl) {\n        if (!toEl.hasAttribute('multiple')) {\n            var selectedIndex = -1;\n            var i = 0;\n            // We have to loop through children of fromEl, not toEl since nodes can be moved\n            // from toEl to fromEl directly when morphing.\n            // At the time this special handler is invoked, all children have already been morphed\n            // and appended to / removed from fromEl, so using fromEl here is safe and correct.\n            var curChild = fromEl.firstChild;\n            var optgroup;\n            var nodeName;\n            while(curChild) {\n                nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();\n                if (nodeName === 'OPTGROUP') {\n                    optgroup = curChild;\n                    curChild = optgroup.firstChild;\n                } else {\n                    if (nodeName === 'OPTION') {\n                        if (curChild.hasAttribute('selected')) {\n                            selectedIndex = i;\n                            break;\n                        }\n                        i++;\n                    }\n                    curChild = curChild.nextSibling;\n                    if (!curChild && optgroup) {\n                        curChild = optgroup.nextSibling;\n                        optgroup = null;\n                    }\n                }\n            }\n\n            fromEl.selectedIndex = selectedIndex;\n        }\n    }\n};\n\nvar ELEMENT_NODE = 1;\nvar DOCUMENT_FRAGMENT_NODE$1 = 11;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\n\nfunction noop() {}\n\nfunction defaultGetNodeKey(node) {\n  if (node) {\n    return (node.getAttribute && node.getAttribute('id')) || node.id;\n  }\n}\n\nfunction morphdomFactory(morphAttrs) {\n\n  return function morphdom(fromNode, toNode, options) {\n    if (!options) {\n      options = {};\n    }\n\n    if (typeof toNode === 'string') {\n      if (fromNode.nodeName === '#document' || fromNode.nodeName === 'HTML' || fromNode.nodeName === 'BODY') {\n        var toNodeHtml = toNode;\n        toNode = doc.createElement('html');\n        toNode.innerHTML = toNodeHtml;\n      } else {\n        toNode = toElement(toNode);\n      }\n    } else if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE$1) {\n      toNode = toNode.firstElementChild;\n    }\n\n    var getNodeKey = options.getNodeKey || defaultGetNodeKey;\n    var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;\n    var onNodeAdded = options.onNodeAdded || noop;\n    var onBeforeElUpdated = options.onBeforeElUpdated || noop;\n    var onElUpdated = options.onElUpdated || noop;\n    var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;\n    var onNodeDiscarded = options.onNodeDiscarded || noop;\n    var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;\n    var skipFromChildren = options.skipFromChildren || noop;\n    var addChild = options.addChild || function(parent, child){ return parent.appendChild(child); };\n    var childrenOnly = options.childrenOnly === true;\n\n    // This object is used as a lookup to quickly find all keyed elements in the original DOM tree.\n    var fromNodesLookup = Object.create(null);\n    var keyedRemovalList = [];\n\n    function addKeyedRemoval(key) {\n      keyedRemovalList.push(key);\n    }\n\n    function walkDiscardedChildNodes(node, skipKeyedNodes) {\n      if (node.nodeType === ELEMENT_NODE) {\n        var curChild = node.firstChild;\n        while (curChild) {\n\n          var key = undefined;\n\n          if (skipKeyedNodes && (key = getNodeKey(curChild))) {\n            // If we are skipping keyed nodes then we add the key\n            // to a list so that it can be handled at the very end.\n            addKeyedRemoval(key);\n          } else {\n            // Only report the node as discarded if it is not keyed. We do this because\n            // at the end we loop through all keyed elements that were unmatched\n            // and then discard them in one final pass.\n            onNodeDiscarded(curChild);\n            if (curChild.firstChild) {\n              walkDiscardedChildNodes(curChild, skipKeyedNodes);\n            }\n          }\n\n          curChild = curChild.nextSibling;\n        }\n      }\n    }\n\n    /**\n    * Removes a DOM node out of the original DOM\n    *\n    * @param  {Node} node The node to remove\n    * @param  {Node} parentNode The nodes parent\n    * @param  {Boolean} skipKeyedNodes If true then elements with keys will be skipped and not discarded.\n    * @return {undefined}\n    */\n    function removeNode(node, parentNode, skipKeyedNodes) {\n      if (onBeforeNodeDiscarded(node) === false) {\n        return;\n      }\n\n      if (parentNode) {\n        parentNode.removeChild(node);\n      }\n\n      onNodeDiscarded(node);\n      walkDiscardedChildNodes(node, skipKeyedNodes);\n    }\n\n    // // TreeWalker implementation is no faster, but keeping this around in case this changes in the future\n    // function indexTree(root) {\n    //     var treeWalker = document.createTreeWalker(\n    //         root,\n    //         NodeFilter.SHOW_ELEMENT);\n    //\n    //     var el;\n    //     while((el = treeWalker.nextNode())) {\n    //         var key = getNodeKey(el);\n    //         if (key) {\n    //             fromNodesLookup[key] = el;\n    //         }\n    //     }\n    // }\n\n    // // NodeIterator implementation is no faster, but keeping this around in case this changes in the future\n    //\n    // function indexTree(node) {\n    //     var nodeIterator = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT);\n    //     var el;\n    //     while((el = nodeIterator.nextNode())) {\n    //         var key = getNodeKey(el);\n    //         if (key) {\n    //             fromNodesLookup[key] = el;\n    //         }\n    //     }\n    // }\n\n    function indexTree(node) {\n      if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {\n        var curChild = node.firstChild;\n        while (curChild) {\n          var key = getNodeKey(curChild);\n          if (key) {\n            fromNodesLookup[key] = curChild;\n          }\n\n          // Walk recursively\n          indexTree(curChild);\n\n          curChild = curChild.nextSibling;\n        }\n      }\n    }\n\n    indexTree(fromNode);\n\n    function handleNodeAdded(el) {\n      onNodeAdded(el);\n\n      var curChild = el.firstChild;\n      while (curChild) {\n        var nextSibling = curChild.nextSibling;\n\n        var key = getNodeKey(curChild);\n        if (key) {\n          var unmatchedFromEl = fromNodesLookup[key];\n          // if we find a duplicate #id node in cache, replace `el` with cache value\n          // and morph it to the child node.\n          if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {\n            curChild.parentNode.replaceChild(unmatchedFromEl, curChild);\n            morphEl(unmatchedFromEl, curChild);\n          } else {\n            handleNodeAdded(curChild);\n          }\n        } else {\n          // recursively call for curChild and it's children to see if we find something in\n          // fromNodesLookup\n          handleNodeAdded(curChild);\n        }\n\n        curChild = nextSibling;\n      }\n    }\n\n    function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {\n      // We have processed all of the \"to nodes\". If curFromNodeChild is\n      // non-null then we still have some from nodes left over that need\n      // to be removed\n      while (curFromNodeChild) {\n        var fromNextSibling = curFromNodeChild.nextSibling;\n        if ((curFromNodeKey = getNodeKey(curFromNodeChild))) {\n          // Since the node is keyed it might be matched up later so we defer\n          // the actual removal to later\n          addKeyedRemoval(curFromNodeKey);\n        } else {\n          // NOTE: we skip nested keyed nodes from being removed since there is\n          //       still a chance they will be matched up later\n          removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n        }\n        curFromNodeChild = fromNextSibling;\n      }\n    }\n\n    function morphEl(fromEl, toEl, childrenOnly) {\n      var toElKey = getNodeKey(toEl);\n\n      if (toElKey) {\n        // If an element with an ID is being morphed then it will be in the final\n        // DOM so clear it out of the saved elements collection\n        delete fromNodesLookup[toElKey];\n      }\n\n      if (!childrenOnly) {\n        // optional\n        if (onBeforeElUpdated(fromEl, toEl) === false) {\n          return;\n        }\n\n        // update attributes on original DOM element first\n        morphAttrs(fromEl, toEl);\n        // optional\n        onElUpdated(fromEl);\n\n        if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {\n          return;\n        }\n      }\n\n      if (fromEl.nodeName !== 'TEXTAREA') {\n        morphChildren(fromEl, toEl);\n      } else {\n        specialElHandlers.TEXTAREA(fromEl, toEl);\n      }\n    }\n\n    function morphChildren(fromEl, toEl) {\n      var skipFrom = skipFromChildren(fromEl, toEl);\n      var curToNodeChild = toEl.firstChild;\n      var curFromNodeChild = fromEl.firstChild;\n      var curToNodeKey;\n      var curFromNodeKey;\n\n      var fromNextSibling;\n      var toNextSibling;\n      var matchingFromEl;\n\n      // walk the children\n      outer: while (curToNodeChild) {\n        toNextSibling = curToNodeChild.nextSibling;\n        curToNodeKey = getNodeKey(curToNodeChild);\n\n        // walk the fromNode children all the way through\n        while (!skipFrom && curFromNodeChild) {\n          fromNextSibling = curFromNodeChild.nextSibling;\n\n          if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {\n            curToNodeChild = toNextSibling;\n            curFromNodeChild = fromNextSibling;\n            continue outer;\n          }\n\n          curFromNodeKey = getNodeKey(curFromNodeChild);\n\n          var curFromNodeType = curFromNodeChild.nodeType;\n\n          // this means if the curFromNodeChild doesnt have a match with the curToNodeChild\n          var isCompatible = undefined;\n\n          if (curFromNodeType === curToNodeChild.nodeType) {\n            if (curFromNodeType === ELEMENT_NODE) {\n              // Both nodes being compared are Element nodes\n\n              if (curToNodeKey) {\n                // The target node has a key so we want to match it up with the correct element\n                // in the original DOM tree\n                if (curToNodeKey !== curFromNodeKey) {\n                  // The current element in the original DOM tree does not have a matching key so\n                  // let's check our lookup to see if there is a matching element in the original\n                  // DOM tree\n                  if ((matchingFromEl = fromNodesLookup[curToNodeKey])) {\n                    if (fromNextSibling === matchingFromEl) {\n                      // Special case for single element removals. To avoid removing the original\n                      // DOM node out of the tree (since that can break CSS transitions, etc.),\n                      // we will instead discard the current node and wait until the next\n                      // iteration to properly match up the keyed target element with its matching\n                      // element in the original tree\n                      isCompatible = false;\n                    } else {\n                      // We found a matching keyed element somewhere in the original DOM tree.\n                      // Let's move the original DOM node into the current position and morph\n                      // it.\n\n                      // NOTE: We use insertBefore instead of replaceChild because we want to go through\n                      // the `removeNode()` function for the node that is being discarded so that\n                      // all lifecycle hooks are correctly invoked\n                      fromEl.insertBefore(matchingFromEl, curFromNodeChild);\n\n                      // fromNextSibling = curFromNodeChild.nextSibling;\n\n                      if (curFromNodeKey) {\n                        // Since the node is keyed it might be matched up later so we defer\n                        // the actual removal to later\n                        addKeyedRemoval(curFromNodeKey);\n                      } else {\n                        // NOTE: we skip nested keyed nodes from being removed since there is\n                        //       still a chance they will be matched up later\n                        removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                      }\n\n                      curFromNodeChild = matchingFromEl;\n                      curFromNodeKey = getNodeKey(curFromNodeChild);\n                    }\n                  } else {\n                    // The nodes are not compatible since the \"to\" node has a key and there\n                    // is no matching keyed node in the source tree\n                    isCompatible = false;\n                  }\n                }\n              } else if (curFromNodeKey) {\n                // The original has a key\n                isCompatible = false;\n              }\n\n              isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);\n              if (isCompatible) {\n                // We found compatible DOM elements so transform\n                // the current \"from\" node to match the current\n                // target DOM node.\n                // MORPH\n                morphEl(curFromNodeChild, curToNodeChild);\n              }\n\n            } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {\n              // Both nodes being compared are Text or Comment nodes\n              isCompatible = true;\n              // Simply update nodeValue on the original node to\n              // change the text value\n              if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {\n                curFromNodeChild.nodeValue = curToNodeChild.nodeValue;\n              }\n\n            }\n          }\n\n          if (isCompatible) {\n            // Advance both the \"to\" child and the \"from\" child since we found a match\n            // Nothing else to do as we already recursively called morphChildren above\n            curToNodeChild = toNextSibling;\n            curFromNodeChild = fromNextSibling;\n            continue outer;\n          }\n\n          // No compatible match so remove the old node from the DOM and continue trying to find a\n          // match in the original DOM. However, we only do this if the from node is not keyed\n          // since it is possible that a keyed node might match up with a node somewhere else in the\n          // target tree and we don't want to discard it just yet since it still might find a\n          // home in the final DOM tree. After everything is done we will remove any keyed nodes\n          // that didn't find a home\n          if (curFromNodeKey) {\n            // Since the node is keyed it might be matched up later so we defer\n            // the actual removal to later\n            addKeyedRemoval(curFromNodeKey);\n          } else {\n            // NOTE: we skip nested keyed nodes from being removed since there is\n            //       still a chance they will be matched up later\n            removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n          }\n\n          curFromNodeChild = fromNextSibling;\n        } // END: while(curFromNodeChild) {}\n\n        // If we got this far then we did not find a candidate match for\n        // our \"to node\" and we exhausted all of the children \"from\"\n        // nodes. Therefore, we will just append the current \"to\" node\n        // to the end\n        if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {\n          // MORPH\n          if(!skipFrom){ addChild(fromEl, matchingFromEl); }\n          morphEl(matchingFromEl, curToNodeChild);\n        } else {\n          var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);\n          if (onBeforeNodeAddedResult !== false) {\n            if (onBeforeNodeAddedResult) {\n              curToNodeChild = onBeforeNodeAddedResult;\n            }\n\n            if (curToNodeChild.actualize) {\n              curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);\n            }\n            addChild(fromEl, curToNodeChild);\n            handleNodeAdded(curToNodeChild);\n          }\n        }\n\n        curToNodeChild = toNextSibling;\n        curFromNodeChild = fromNextSibling;\n      }\n\n      cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);\n\n      var specialElHandler = specialElHandlers[fromEl.nodeName];\n      if (specialElHandler) {\n        specialElHandler(fromEl, toEl);\n      }\n    } // END: morphChildren(...)\n\n    var morphedNode = fromNode;\n    var morphedNodeType = morphedNode.nodeType;\n    var toNodeType = toNode.nodeType;\n\n    if (!childrenOnly) {\n      // Handle the case where we are given two DOM nodes that are not\n      // compatible (e.g. <div> --> <span> or <div> --> TEXT)\n      if (morphedNodeType === ELEMENT_NODE) {\n        if (toNodeType === ELEMENT_NODE) {\n          if (!compareNodeNames(fromNode, toNode)) {\n            onNodeDiscarded(fromNode);\n            morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));\n          }\n        } else {\n          // Going from an element node to a text node\n          morphedNode = toNode;\n        }\n      } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) { // Text or comment node\n        if (toNodeType === morphedNodeType) {\n          if (morphedNode.nodeValue !== toNode.nodeValue) {\n            morphedNode.nodeValue = toNode.nodeValue;\n          }\n\n          return morphedNode;\n        } else {\n          // Text node to something else\n          morphedNode = toNode;\n        }\n      }\n    }\n\n    if (morphedNode === toNode) {\n      // The \"to node\" was not compatible with the \"from node\" so we had to\n      // toss out the \"from node\" and use the \"to node\"\n      onNodeDiscarded(fromNode);\n    } else {\n      if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {\n        return;\n      }\n\n      morphEl(morphedNode, toNode, childrenOnly);\n\n      // We now need to loop over any keyed nodes that might need to be\n      // removed. We only do the removal if we know that the keyed node\n      // never found a match. When a keyed node is matched up we remove\n      // it out of fromNodesLookup and we use fromNodesLookup to determine\n      // if a keyed node has been matched up or not\n      if (keyedRemovalList) {\n        for (var i=0, len=keyedRemovalList.length; i<len; i++) {\n          var elToRemove = fromNodesLookup[keyedRemovalList[i]];\n          if (elToRemove) {\n            removeNode(elToRemove, elToRemove.parentNode, false);\n          }\n        }\n      }\n    }\n\n    if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {\n      if (morphedNode.actualize) {\n        morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);\n      }\n      // If we had to swap out the from node with a new node because the old\n      // node was not compatible with the target node then we need to\n      // replace the old DOM node in the original DOM tree. This is only\n      // possible if the original DOM node was part of a DOM tree which\n      // we know is the case if it has a parent node.\n      fromNode.parentNode.replaceChild(morphedNode, fromNode);\n    }\n\n    return morphedNode;\n  };\n}\n\nvar morphdom = morphdomFactory(morphAttrs);\n\nexport default morphdom;\n","import { State } from \"../../State\"\n\nconst isContentToRenderValid = (content: string) => {\n  const isInvalidType = typeof content !== 'string'\n  const isInvalidTypeError = 'The \"content\" to render in the DOM must be a string'\n  if (isInvalidType) {\n    console.error(isInvalidTypeError)\n    return false\n  }\n  return true\n}\nconst isShowIfAttributeValid = <T>(state: State<T>, showIfAttr: string) => {\n  const isNotEnumState = !state.isEnum\n  const isNotEnumStateError = 'The \"data-show-if\" attribute is only supported for enum states'\n  if (isNotEnumState) {\n    console.error(isNotEnumStateError)\n    return false\n  }\n  // the attribute from the element will always be a string\n  // but if the possibile values of the state are numbers, then the show if attribute 'string' should be treated as a number\n  // therefore the `rightTypeShowIfAttr` variable will store the show if attribute but with the right type\n  // that means if possible values are strings then it will be a string, if possible values are numbers then it will be a number\n  let rightTypeShowIfAttr: string | number = showIfAttr\n  if (state.possibleValuesType === 'number') {\n    // if possible values are numbers, then showIfAttr must be a number\n    rightTypeShowIfAttr = Number(showIfAttr)\n    const isNotANumber = isNaN(rightTypeShowIfAttr)\n    const isNotANumberError = 'The \"data-show-if\" attribute must be a number if possible values are numbers'\n    if (isNotANumber) {\n      console.error(isNotANumberError)\n      return false\n    }\n  }\n  const isNotAPossibleValue = !state.possibleValues.includes(rightTypeShowIfAttr)\n  const isNotAPossibleValueError = 'The \"data-show-if\" attribute must be one of the possible values of the state'\n  if (isNotAPossibleValue) {\n    console.error(isNotAPossibleValueError)\n    return false\n  }\n  return true\n}\n\nexport const domManagerValidators = {\n  isContentToRenderValid,\n  isShowIfAttributeValid\n}\n\nexport const domManagerErrorMessages = {\n  couldNotUpdateStateInDOM: 'An error occurred while updating the state in the DOM'\n}\n","import morphdom from 'morphdom'\nimport { State } from './State'\nimport { domManagerErrorMessages, domManagerValidators } from './utils/DOMManager/utils'\n\nexport class DOMManager<T> {\n  #state: State<T>\n  #elementsUsingState: HTMLElement[]\n\n  constructor(state: State<T>) {\n    this.#state = state\n    this.#elementsUsingState = Array.from(\n      this.#state.wrapper.querySelectorAll(`[data-state=\"${this.#state.id}\"]`)\n    )\n  }\n  #renderContentFromOnRender(state: T, element: HTMLElement) {\n    const contentToRender = this.#state.onRender(state)\n    if (!domManagerValidators.isContentToRenderValid(contentToRender))\n      return console.error(domManagerErrorMessages.couldNotUpdateStateInDOM)\n    const clonedElement = element.cloneNode() as HTMLElement\n    clonedElement.innerHTML = contentToRender\n    morphdom(element, clonedElement)\n  }\n  #conditionallyShowElementBasedOnShowIfAttr(state: T, element: HTMLElement) {\n    const showIfAttr = element.getAttribute('data-show-if') ?? ''\n    if (!domManagerValidators.isShowIfAttributeValid(this.#state, showIfAttr))\n      return console.error(domManagerErrorMessages.couldNotUpdateStateInDOM)\n    element.style.display = `${state}` === showIfAttr ? '' : 'none'\n  }\n  #conditionallyShowElementBasedOnBooleanState(state: boolean, element: HTMLElement) {\n    const display = state ? '' : 'none'\n    if (element.style.display === display) return\n    element.style.display = display\n  }\n  #renderContentFromState(state: string | number | bigint, element: HTMLElement) {\n    if (typeof state === 'object') return // to prevent eslint warning\n    const newContent = `${state}`\n    if (element.textContent === newContent) return\n    element.textContent = newContent\n  }\n  updateElements(state: T) {\n    const updateElement = (elementUsingState: HTMLElement) => {\n      if (this.#state.isUsingOnRender) {\n        this.#renderContentFromOnRender(state, elementUsingState)\n        return\n      }\n      if (elementUsingState.getAttribute('data-show-if') != null) {\n        this.#conditionallyShowElementBasedOnShowIfAttr(state, elementUsingState)\n        return\n      }\n      if (typeof state === 'boolean') {\n        this.#conditionallyShowElementBasedOnBooleanState(state, elementUsingState)\n        return\n      }\n      if (typeof state === 'string' || typeof state === 'number' || typeof state === 'bigint') {\n        this.#renderContentFromState(state, elementUsingState)\n      }\n    }\n    this.#elementsUsingState.forEach(updateElement)\n  }\n}","export const determinePossibleValuesType = (possibleValues: (string | number)[]) => {\n  if (possibleValues.every((pv) => typeof pv === 'string')) return 'string'\n  if (possibleValues.every((pv) => typeof pv === 'number')) return 'number'\n  return 'unknown'\n}\nconst isPossibleValuesValid = (possibleValues: (string | number)[], type: string) => {\n  const isAnArray = possibleValues instanceof Array\n  const isNotAnArrayError = 'The \"possible values\" of an enum state must be an array'\n  if (!isAnArray) {\n    console.error(isNotAnArrayError)\n    return false\n  }\n  const isAnEmptyArray = possibleValues.length === 0\n  const isEmptyArrayError = 'The \"possible values\" of an enum state must NOT be an empty array'\n  if (isAnEmptyArray) {\n    console.error(isEmptyArrayError)\n    return false\n  }\n  const hasInvalidItem = type === 'unknown' || (type !== 'string' && type !== 'number')\n  const hasInvalidItemError =\n    'The \"possible values\" of an enum state must be an array of strings or numbers'\n  if (hasInvalidItem) {\n    console.error(hasInvalidItemError)\n    return false\n  }\n  return true\n}\nconst isInitialStateValid = <T>(initial: T, possibleValuesType: string) => {\n  const isInvalidType = typeof initial !== possibleValuesType\n  const isInvalidTypeError = `The \"initial value\" of your enum state must be a ${possibleValuesType}`\n  if (isInvalidType) {\n    console.error(isInvalidTypeError)\n    return false\n  }\n  return true\n}\nconst isUpdateStateValid = <T>(\n  state: T,\n  possibleValues: (string | number)[],\n  possibleValuesType: string\n) => {\n  const isInvalidType = typeof state !== possibleValuesType\n  const isInvalidTypeError = `The \"state\" of your enum state must be a ${possibleValuesType}`\n  if (isInvalidType) {\n    console.error(isInvalidTypeError)\n    return false\n  }\n  const isNotAPossibleValue = !possibleValues.includes(state as string | number)\n  const isNotAPossibleValueError = `The \"state\" of your enum state must be one of the possible values`\n  if (isNotAPossibleValue) {\n    console.error(isNotAPossibleValueError)\n    return false\n  }\n  return true\n}\n\nexport const enumStateValidators = {\n  isPossibleValuesValid,\n  isInitialStateValid,\n  isUpdateStateValid\n}\n\nconst isIdValid = (id: string) => {\n  const isNotString = typeof id !== 'string'\n  const isNotStringError = 'The \"id\" of your state must be of type string'\n  if (isNotString) {\n    console.error(isNotStringError)\n    return false\n  }\n  const isEmptyString = id === ''\n  const isEmptyStringError = 'The \"id\" of your state must be a non-empty string'\n  if (isEmptyString) {\n    console.error(isEmptyStringError)\n    return false\n  }\n  return true\n}\nconst isWrapperValid = (wrapper: HTMLElement) => {\n  const isInstanceOfHTMLElement = wrapper instanceof HTMLElement\n  const isNotInstanceOfHTMLElementError =\n    'The \"wrapper\" of your state must be an instance of HTMLElement'\n  if (!isInstanceOfHTMLElement) {\n    console.error(isNotInstanceOfHTMLElementError)\n    return false\n  }\n  return true\n}\n\nexport const stateValidators = {\n  isIdValid,\n  isWrapperValid\n}\n\nexport const stateErrorMessages = {\n  couldNotCreate: 'An error occurred while creating the state',\n  couldNotUpdate: 'An error occurred while updating the state'\n}\n","import { DOMManager } from './DOMManager'\nimport {\n  determinePossibleValuesType,\n  enumStateValidators,\n  stateErrorMessages,\n  stateValidators\n} from './utils/State/utils'\n\nexport class State<T> {\n  #isEnum: boolean\n  #possibleValues: (string | number)[]\n  #possibleValuesType: string\n\n  #preserve: boolean\n\n  #id: string\n  #initial: T\n  #current: T\n  #wrapper: HTMLElement\n\n  onChange: (state: T, prevState: T) => void\n  #isUsingOnRender: boolean\n  onRender: (state: T) => string\n\n  #domManager: DOMManager<T>\n\n  constructor({\n    id,\n    initial,\n    wrapper,\n    onChange,\n    onRender,\n    possibleValues,\n    preserve\n  }: {\n    id: string\n    initial: T\n    wrapper?: HTMLElement\n    onChange?: (state: T, prevState: T) => void\n    onRender?: (state: T) => string\n    possibleValues?: (string | number)[]\n    preserve?: boolean\n  }) {\n    const stateWrapper = wrapper ?? document.body\n    if (!stateValidators.isIdValid(id)) throw new Error(stateErrorMessages.couldNotCreate)\n    if (!stateValidators.isWrapperValid(stateWrapper)) throw new Error(stateErrorMessages.couldNotCreate)\n\n    this.#id = id\n    this.#initial = initial\n    this.#preserve = preserve ?? false\n    this.#wrapper = stateWrapper\n    const currentStateValue = (() => {\n      if (this.#preserve) {\n        const lsState = localStorage.getItem(id)\n        if (lsState !== null) return JSON.parse(lsState) as T\n      }\n      return initial\n    })()\n    this.#current = currentStateValue\n    this.onChange = onChange ?? (() => {})\n\n    this.#isEnum = possibleValues != null\n    this.#possibleValues = possibleValues ?? []\n    const possibleValuesType = possibleValues != null\n      ? determinePossibleValuesType(possibleValues)\n      : 'unknown'\n    this.#possibleValuesType = possibleValuesType\n    if (possibleValues != null) {\n      if (!enumStateValidators.isPossibleValuesValid(possibleValues, possibleValuesType))\n        throw new Error(stateErrorMessages.couldNotCreate)\n      if (!enumStateValidators.isInitialStateValid(initial, possibleValuesType))\n        throw new Error(stateErrorMessages.couldNotCreate)\n    }\n    this.#isUsingOnRender = onRender != null\n    this.onRender = onRender ?? (() => ``)\n\n    this.#domManager = new DOMManager(this)\n    this.#domManager.updateElements(currentStateValue)\n  }\n  #changeState(state: T) {\n    const prevState = this.#current\n    this.#current = state // this property is only changed in this method\n    this.onChange(state, prevState)\n  }\n  update(state: T) {\n    if (this.#isEnum) {\n      if (\n        !enumStateValidators.isUpdateStateValid(\n          state,\n          this.#possibleValues,\n          this.#possibleValuesType\n        )\n      )\n        return console.error(stateErrorMessages.couldNotUpdate)\n    }\n    this.#domManager.updateElements(state)\n    this.#changeState(state)\n    if (this.#preserve) localStorage.setItem(this.#id, JSON.stringify(state))\n  }\n  reset() {\n    this.#domManager.updateElements(this.#initial)\n    this.#changeState(this.#initial)\n    if (this.#preserve) localStorage.removeItem(this.#id)\n  }\n\n  get id() {\n    return this.#id\n  }\n  get current() {\n    return this.#current\n  }\n  get isUsingOnRender() {\n    return this.#isUsingOnRender\n  }\n  get isEnum() {\n    return this.#isEnum\n  }\n  get possibleValues() {\n    return this.#possibleValues\n  }\n  get possibleValuesType() {\n    return this.#possibleValuesType\n  }\n  get wrapper() {\n    return this.#wrapper\n  }\n}\n"],"names":["range","doc","document","undefined","HAS_TEMPLATE_SUPPORT","createElement","HAS_RANGE_SUPPORT","createRange","compareNodeNames","fromEl","toEl","fromCodeStart","toCodeStart","fromNodeName","nodeName","toNodeName","charCodeAt","toUpperCase","syncBooleanAttrProp","name","setAttribute","removeAttribute","specialElHandlers","OPTION","parentNode","parentName","hasAttribute","selected","selectedIndex","INPUT","value","TEXTAREA","newValue","firstChild","oldValue","nodeValue","placeholder","SELECT","optgroup","i","curChild","nextSibling","noop","defaultGetNodeKey","node","getAttribute","id","morphdom","fromNode","toNode","options","toNodeHtml","innerHTML","str","trim","template","content","childNodes","createFragmentFromTemplate","selectNode","body","createContextualFragment","createFragmentFromRange","fragment","createFragmentFromWrap","nodeType","firstElementChild","getNodeKey","onBeforeNodeAdded","onNodeAdded","onBeforeElUpdated","onElUpdated","onBeforeNodeDiscarded","onNodeDiscarded","onBeforeElChildrenUpdated","skipFromChildren","addChild","parent","child","appendChild","childrenOnly","fromNodesLookup","Object","create","keyedRemovalList","addKeyedRemoval","key","push","walkDiscardedChildNodes","skipKeyedNodes","removeNode","removeChild","handleNodeAdded","el","unmatchedFromEl","replaceChild","morphEl","toElKey","attr","attrName","attrNamespaceURI","attrValue","toNodeAttrs","attributes","length","namespaceURI","getAttributeNS","localName","prefix","setAttributeNS","fromNodeAttrs","d","hasAttributeNS","removeAttributeNS","morphAttrs","curToNodeKey","curFromNodeKey","fromNextSibling","toNextSibling","matchingFromEl","skipFrom","curToNodeChild","curFromNodeChild","outer","isSameNode","curFromNodeType","isCompatible","insertBefore","onBeforeNodeAddedResult","actualize","ownerDocument","cleanupFromEl","specialElHandler","morphChildren","indexTree","morphedNode","morphedNodeType","toNodeType","nextChild","moveChildren","createElementNS","len","elToRemove","domManagerErrorMessages","_state","_classPrivateFieldLooseKey","_elementsUsingState","_renderContentFromOnRender","_conditionallyShowElementBasedOnShowIfAttr","_conditionallyShowElementBasedOnBooleanState","_renderContentFromState","DOMManager","state","defineProperty","_renderContentFromState2","_conditionallyShowElementBasedOnBooleanState2","_conditionallyShowElementBasedOnShowIfAttr2","_renderContentFromOnRender2","writable","_classPrivateFieldLooseBase","this","Array","from","wrapper","querySelectorAll","prototype","updateElements","_this","forEach","elementUsingState","isUsingOnRender","element","contentToRender","onRender","console","error","clonedElement","cloneNode","_element$getAttribute","showIfAttr","isEnum","rightTypeShowIfAttr","possibleValuesType","Number","isNaN","possibleValues","includes","domManagerValidators","style","display","newContent","textContent","stateErrorMessages","_isEnum","_possibleValues","_possibleValuesType","_preserve","_id","_initial","_current","_wrapper","_isUsingOnRender","_domManager","_changeState","State","_ref","initial","onChange","preserve","_changeState2","stateWrapper","stateValidators","Error","HTMLElement","currentStateValue","lsState","localStorage","getItem","JSON","parse","every","pv","determinePossibleValuesType","type","enumStateValidators","_proto","update","setItem","stringify","reset","removeItem","get","prevState"],"mappings":"mIAgEIA,kVACJ,IAEIC,EAA0B,oBAAbC,cAA2BC,EAAYD,SACpDE,IAAyBH,GAAO,YAAaA,EAAII,cAAc,YAC/DC,IAAsBL,GAAOA,EAAIM,aAAe,6BAA8BN,EAAIM,cAwDtF,SAASC,EAAiBC,EAAQC,GAC9B,IAEIC,EAAeC,EAFfC,EAAeJ,EAAOK,SACtBC,EAAaL,EAAKI,SAGtB,OAAID,IAAiBE,IAIrBJ,EAAgBE,EAAaG,WAAW,GACxCJ,EAAcG,EAAWC,WAAW,GAMhCL,GAAiB,IAAMC,GAAe,GAC/BC,IAAiBE,EAAWE,cAC5BL,GAAe,IAAMD,GAAiB,IACtCI,IAAeF,EAAaI,cAI3C,CA8BA,SAASC,EAAoBT,EAAQC,EAAMS,GACnCV,EAAOU,KAAUT,EAAKS,KACtBV,EAAOU,GAAQT,EAAKS,GAChBV,EAAOU,GACPV,EAAOW,aAAaD,EAAM,IAE1BV,EAAOY,gBAAgBF,GAGnC,CAEA,IAAIG,EAAoB,CACpBC,OAAQ,SAASd,EAAQC,GACrB,IAAIc,EAAaf,EAAOe,WACxB,GAAIA,EAAY,CACZ,IAAIC,EAAaD,EAAWV,SAASG,cAClB,aAAfQ,IAEAA,GADAD,EAAaA,EAAWA,aACGA,EAAWV,SAASG,eAEhC,WAAfQ,GAA4BD,EAAWE,aAAa,cAChDjB,EAAOiB,aAAa,cAAgBhB,EAAKiB,WAIzClB,EAAOW,aAAa,WAAY,YAChCX,EAAOY,gBAAgB,aAK3BG,EAAWI,eAAiB,EAEnC,CACDV,EAAoBT,EAAQC,EAAM,WACrC,EAODmB,MAAO,SAASpB,EAAQC,GACpBQ,EAAoBT,EAAQC,EAAM,WAClCQ,EAAoBT,EAAQC,EAAM,YAE9BD,EAAOqB,QAAUpB,EAAKoB,QACtBrB,EAAOqB,MAAQpB,EAAKoB,OAGnBpB,EAAKgB,aAAa,UACnBjB,EAAOY,gBAAgB,QAE9B,EAEDU,SAAU,SAAStB,EAAQC,GACvB,IAAIsB,EAAWtB,EAAKoB,MAChBrB,EAAOqB,QAAUE,IACjBvB,EAAOqB,MAAQE,GAGnB,IAAIC,EAAaxB,EAAOwB,WACxB,GAAIA,EAAY,CAGZ,IAAIC,EAAWD,EAAWE,UAE1B,GAAID,GAAYF,IAAcA,GAAYE,GAAYzB,EAAO2B,YACzD,OAGJH,EAAWE,UAAYH,CAC1B,CACJ,EACDK,OAAQ,SAAS5B,EAAQC,GACrB,IAAKA,EAAKgB,aAAa,YAAa,CAUhC,IATA,IAOIY,EACAxB,EARAc,GAAiB,EACjBW,EAAI,EAKJC,EAAW/B,EAAOwB,WAGhBO,GAEF,GAAiB,cADjB1B,EAAW0B,EAAS1B,UAAY0B,EAAS1B,SAASG,eAG9CuB,GADAF,EAAWE,GACSP,eACjB,CACH,GAAiB,WAAbnB,EAAuB,CACvB,GAAI0B,EAASd,aAAa,YAAa,CACnCE,EAAgBW,EAChB,KACH,CACDA,GACH,GACDC,EAAWA,EAASC,cACHH,IACbE,EAAWF,EAASG,YACpBH,EAAW,KAElB,CAGL7B,EAAOmB,cAAgBA,CAC1B,CACJ,GAQL,SAASc,IAAS,CAElB,SAASC,EAAkBC,GACzB,GAAIA,EACF,OAAQA,EAAKC,cAAgBD,EAAKC,aAAa,OAAUD,EAAKE,EAElE,CA0cA,IAAIC,EAtcK,SAAkBC,EAAUC,EAAQC,GAKzC,GAJKA,IACHA,EAAU,CAAA,GAGU,iBAAXD,EACT,GAA0B,cAAtBD,EAASlC,UAAkD,SAAtBkC,EAASlC,UAA6C,SAAtBkC,EAASlC,SAAqB,CACrG,IAAIqC,EAAaF,GACjBA,EAAShD,EAAII,cAAc,SACpB+C,UAAYD,CAC3B,MApNIE,GADeA,EAsNQJ,GArNbK,OAqNNL,EApNA7C,EAhCR,SAAoCiD,GAChC,IAAIE,EAAWtD,EAAII,cAAc,YAEjC,OADAkD,EAASH,UAAYC,EACdE,EAASC,QAAQC,WAAW,EACvC,CAgCaC,CAA2BL,GACzB/C,EA/Bf,SAAiC+C,GAO7B,OANKrD,IACDA,EAAQC,EAAIM,eACNoD,WAAW1D,EAAI2D,MAGV5D,EAAM6D,yBAAyBR,GAC9BI,WAAW,EAC/B,CAwBaK,CAAwBT,GAtBrC,SAAgCA,GAC5B,IAAIU,EAAW9D,EAAII,cAAc,QAEjC,OADA0D,EAASX,UAAYC,EACdU,EAASN,WAAW,EAC/B,CAqBWO,CAAuBX,QAkLH,KA2BhBJ,EAAOgB,WAChBhB,EAASA,EAAOiB,mBAzNtB,IAAmBb,EA4NXc,EAAajB,EAAQiB,YAAcxB,EACnCyB,EAAoBlB,EAAQkB,mBAAqB1B,EACjD2B,EAAcnB,EAAQmB,aAAe3B,EACrC4B,EAAoBpB,EAAQoB,mBAAqB5B,EACjD6B,EAAcrB,EAAQqB,aAAe7B,EACrC8B,EAAwBtB,EAAQsB,uBAAyB9B,EACzD+B,EAAkBvB,EAAQuB,iBAAmB/B,EAC7CgC,EAA4BxB,EAAQwB,2BAA6BhC,EACjEiC,EAAmBzB,EAAQyB,kBAAoBjC,EAC/CkC,EAAW1B,EAAQ0B,UAAY,SAASC,EAAQC,GAAQ,OAAOD,EAAOE,YAAYD,EAAO,EACzFE,GAAwC,IAAzB9B,EAAQ8B,aAGvBC,EAAkBC,OAAOC,OAAO,MAChCC,EAAmB,GAEvB,SAASC,EAAgBC,GACvBF,EAAiBG,KAAKD,EACvB,CAED,SAASE,EAAwB5C,EAAM6C,GACrC,GArDa,IAqDT7C,EAAKqB,SAEP,IADA,IAAIzB,EAAWI,EAAKX,WACbO,GAAU,CAEf,IAAI8C,OAAMnF,EAENsF,IAAmBH,EAAMnB,EAAW3B,IAGtC6C,EAAgBC,IAKhBb,EAAgBjC,GACZA,EAASP,YACXuD,EAAwBhD,EAAUiD,IAItCjD,EAAWA,EAASC,WACrB,CAEJ,CAUD,SAASiD,EAAW9C,EAAMpB,EAAYiE,IACA,IAAhCjB,EAAsB5B,KAItBpB,GACFA,EAAWmE,YAAY/C,GAGzB6B,EAAgB7B,GAChB4C,EAAwB5C,EAAM6C,GAC/B,CAiDD,SAASG,EAAgBC,GACvBxB,EAAYwB,GAGZ,IADA,IAAIrD,EAAWqD,EAAG5D,WACXO,GAAU,CACf,IAAIC,EAAcD,EAASC,YAEvB6C,EAAMnB,EAAW3B,GACrB,GAAI8C,EAAK,CACP,IAAIQ,EAAkBb,EAAgBK,GAGlCQ,GAAmBtF,EAAiBgC,EAAUsD,IAChDtD,EAAShB,WAAWuE,aAAaD,EAAiBtD,GAClDwD,EAAQF,EAAiBtD,IAEzBoD,EAAgBpD,EAE5B,MAGUoD,EAAgBpD,GAGlBA,EAAWC,CACZ,CACF,CAqBD,SAASuD,EAAQvF,EAAQC,EAAMsE,GAC7B,IAAIiB,EAAU9B,EAAWzD,GAQzB,GANIuF,UAGKhB,EAAgBgB,IAGpBjB,EAAc,CAEjB,IAAwC,IAApCV,EAAkB7D,EAAQC,GAC5B,OAQF,GApfR,SAAoBsC,EAAUC,GAC1B,IACIiD,EACAC,EACAC,EACAC,EAJAC,EAAcrD,EAAOsD,WAQzB,GAXyB,KAWrBtD,EAAOgB,UAXc,KAWyBjB,EAASiB,SAA3D,CAKA,IAAK,IAAI1B,EAAI+D,EAAYE,OAAS,EAAGjE,GAAK,EAAGA,IAEzC4D,GADAD,EAAOI,EAAY/D,IACHpB,KAEhBkF,EAAYH,EAAKpE,OADjBsE,EAAmBF,EAAKO,cAKRzD,EAAS0D,eAAeN,EADpCD,EAAWD,EAAKS,WAAaR,KAGXE,IACM,UAAhBH,EAAKU,SACLT,EAAWD,EAAK/E,MAEpB6B,EAAS6D,eAAeT,EAAkBD,EAAUE,IAG5CrD,EAASH,aAAasD,KAEhBE,GACdrD,EAAS5B,aAAa+E,EAAUE,GAS5C,IAFA,IAAIS,EAAgB9D,EAASuD,WAEpBQ,EAAID,EAAcN,OAAS,EAAGO,GAAK,EAAGA,IAE3CZ,GADAD,EAAOY,EAAcC,IACL5F,MAChBiF,EAAmBF,EAAKO,cAKfxD,EAAO+D,eAAeZ,EAF3BD,EAAWD,EAAKS,WAAaR,IAGzBnD,EAASiE,kBAAkBb,EAAkBD,GAG5ClD,EAAOvB,aAAayE,IACrBnD,EAAS3B,gBAAgB8E,EA7CpC,CAiDL,CAobQe,CAAWzG,EAAQC,GAEnB6D,EAAY9D,IAEoC,IAA5CiE,EAA0BjE,EAAQC,GACpC,MAEH,CAEuB,aAApBD,EAAOK,SAOb,SAAuBL,EAAQC,GAC7B,IAGIyG,EACAC,EAEAC,EACAC,EACAC,EARAC,EAAW7C,EAAiBlE,EAAQC,GACpC+G,EAAiB/G,EAAKuB,WACtByF,EAAmBjH,EAAOwB,WAS9B0F,EAAO,KAAOF,GAAgB,CAK5B,IAJAH,EAAgBG,EAAehF,YAC/B0E,EAAehD,EAAWsD,IAGlBD,GAAYE,GAAkB,CAGpC,GAFAL,EAAkBK,EAAiBjF,YAE/BgF,EAAeG,YAAcH,EAAeG,WAAWF,GAAmB,CAC5ED,EAAiBH,EACjBI,EAAmBL,EACnB,SAASM,CACV,CAEDP,EAAiBjD,EAAWuD,GAE5B,IAAIG,EAAkBH,EAAiBzD,SAGnC6D,OAAe3H,EA8EnB,GA5EI0H,IAAoBJ,EAAexD,WAlQ9B,IAmQH4D,GAGEV,EAGEA,IAAiBC,KAIdG,EAAiBtC,EAAgBkC,IAChCE,IAAoBE,EAMtBO,GAAe,GASfrH,EAAOsH,aAAaR,EAAgBG,GAIhCN,EAGF/B,EAAgB+B,GAIhB1B,EAAWgC,EAAkBjH,GAAQ,GAIvC2G,EAAiBjD,EADjBuD,EAAmBH,IAMrBO,GAAe,GAGVV,IAETU,GAAe,IAGjBA,GAAgC,IAAjBA,GAA0BtH,EAAiBkH,EAAkBD,KAM1EzB,EAAQ0B,EAAkBD,IA7T1B,IAgUOI,GA/TJ,GA+TqCA,IAE1CC,GAAe,EAGXJ,EAAiBvF,YAAcsF,EAAetF,YAChDuF,EAAiBvF,UAAYsF,EAAetF,aAM9C2F,EAAc,CAGhBL,EAAiBH,EACjBI,EAAmBL,EACnB,SAASM,CACV,CAQGP,EAGF/B,EAAgB+B,GAIhB1B,EAAWgC,EAAkBjH,GAAQ,GAGvCiH,EAAmBL,CACpB,CAMD,GAAIF,IAAiBI,EAAiBtC,EAAgBkC,KAAkB3G,EAAiB+G,EAAgBE,GAEnGD,GAAW5C,EAASnE,EAAQ8G,GAChCvB,EAAQuB,EAAgBE,OACnB,CACL,IAAIO,EAA0B5D,EAAkBqD,IAChB,IAA5BO,IACEA,IACFP,EAAiBO,GAGfP,EAAeQ,YACjBR,EAAiBA,EAAeQ,UAAUxH,EAAOyH,eAAiBjI,IAEpE2E,EAASnE,EAAQgH,GACjB7B,EAAgB6B,GAEnB,CAEDA,EAAiBH,EACjBI,EAAmBL,CACpB,EApNH,SAAuB5G,EAAQiH,EAAkBN,GAI/C,KAAOM,GAAkB,CACvB,IAAIL,EAAkBK,EAAiBjF,aAClC2E,EAAiBjD,EAAWuD,IAG/BrC,EAAgB+B,GAIhB1B,EAAWgC,EAAkBjH,GAAQ,GAEvCiH,EAAmBL,CACpB,CACF,CAqMCc,CAAc1H,EAAQiH,EAAkBN,GAExC,IAAIgB,EAAmB9G,EAAkBb,EAAOK,UAC5CsH,GACFA,EAAiB3H,EAAQC,EAE5B,CA/KG2H,CAAc5H,EAAQC,GAEtBY,EAAkBS,SAAStB,EAAQC,EAEtC,EAhGD,SAAS4H,EAAU1F,GACjB,GAhIa,IAgITA,EAAKqB,UA/HgB,KA+HarB,EAAKqB,SAEzC,IADA,IAAIzB,EAAWI,EAAKX,WACbO,GAAU,CACf,IAAI8C,EAAMnB,EAAW3B,GACjB8C,IACFL,EAAgBK,GAAO9C,GAIzB8F,EAAU9F,GAEVA,EAAWA,EAASC,WACrB,CAEJ,CAED6F,CAAUtF,GA4PV,IA9gBqB7B,EAAMsF,EA8gBvB8B,EAAcvF,EACdwF,EAAkBD,EAAYtE,SAC9BwE,EAAaxF,EAAOgB,SAExB,IAAKe,EAGH,GAnZa,IAmZTwD,EAnZS,IAoZPC,EACGjI,EAAiBwC,EAAUC,KAC9BwB,EAAgBzB,GAChBuF,EAhhBZ,SAAsB9H,EAAQC,GAE1B,IADA,IAAI8B,EAAW/B,EAAOwB,WACfO,GAAU,CACb,IAAIkG,EAAYlG,EAASC,YACzB/B,EAAKqE,YAAYvC,GACjBA,EAAWkG,CACd,CACD,OAAOhI,CACX,CAwgB0BiI,CAAa3F,GAzhBd7B,EAyhBwC8B,EAAOnC,UAzhBzC2F,EAyhBmDxD,EAAOwD,eAvnB1E,iCA+FaA,EAEpBxG,EAAI2I,gBAAgBnC,EAActF,GADlClB,EAAII,cAAcc,MA2hBhBoH,EAActF,OAEX,GA3ZG,IA2ZCuF,GA1ZE,IA0Z+BA,EAAkC,CAC5E,GAAIC,IAAeD,EAKjB,OAJID,EAAYpG,YAAcc,EAAOd,YACnCoG,EAAYpG,UAAYc,EAAOd,WAG1BoG,EAGPA,EAActF,CAEjB,CAGH,GAAIsF,IAAgBtF,EAGlBwB,EAAgBzB,OACX,CACL,GAAIC,EAAO2E,YAAc3E,EAAO2E,WAAWW,GACzC,OAUF,GAPAvC,EAAQuC,EAAatF,EAAQ+B,GAOzBI,EACF,IAAK,IAAI7C,EAAE,EAAGsG,EAAIzD,EAAiBoB,OAAQjE,EAAEsG,EAAKtG,IAAK,CACrD,IAAIuG,EAAa7D,EAAgBG,EAAiB7C,IAC9CuG,GACFpD,EAAWoD,EAAYA,EAAWtH,YAAY,EAEjD,CAEJ,CAcD,OAZKwD,GAAgBuD,IAAgBvF,GAAYA,EAASxB,aACpD+G,EAAYN,YACdM,EAAcA,EAAYN,UAAUjF,EAASkF,eAAiBjI,IAOhE+C,EAASxB,WAAWuE,aAAawC,EAAavF,IAGzCuF,CACX,ECpsBaQ,EACe,wDC9C4DC,eAAAC,EAAA,SAAAC,eAAAD,EAAA,sBAAAE,eAAAF,EAAA,6BAAAG,eAAAH,EAAA,6CAAAI,eAAAJ,EAAA,+CAAAK,eAAAL,EAAA,0BAE3EM,eAAU,WAIrB,SAAAA,EAAYC,GAAetE,OAAAuE,eAAAH,KAAAA,EAAAxH,CAAAA,MAAA4H,IAAAxE,OAAAuE,eAAAJ,KAAAA,EAAAvH,CAAAA,MAAA6H,IAAAzE,OAAAuE,eAAAL,KAAAA,EAAAtH,CAAAA,MAAA8H,IAAA1E,OAAAuE,eAAAN,KAAAA,EAAArH,CAAAA,MAAA+H,IAAA3E,OAAAuE,eAAAT,KAAAA,EAAAc,CAAAA,UAAAhI,EAAAA,WAAAoD,IAAAA,OAAAuE,eAAAP,KAAAA,EAAAY,CAAAA,UAAAhI,EAAAA,WACzBiI,IAAAA,EAAIC,KAAAhB,GAAAA,GAAUQ,EACdO,EAAAC,KAAId,GAAAA,GAAuBe,MAAMC,KAC/BH,EAAAC,KAAIhB,GAAAA,GAAQmB,QAAQC,iBAAiCL,gBAAAA,EAAIC,KAAAhB,GAAAA,GAAQlG,GAAE,MAEvE,CA6CC,OA7CAyG,EAAAc,UA0BDC,eAAA,SAAed,GAAQe,IAAAA,EACrBP,KAiBAD,EAAIC,KAAAd,GAAAA,GAAqBsB,QAjBH,SAACC,GACjBV,EAAAQ,EAAIvB,GAAAA,GAAQ0B,gBACdX,EAAAQ,EAAIpB,GAAAA,GAA4BK,EAAOiB,GAGa,MAAlDA,EAAkB5H,aAAa,gBAId,kBAAV2G,EAIU,iBAAVA,GAAuC,iBAAVA,GAAuC,iBAAVA,GACnEO,EAAAQ,EAAIjB,GAAAA,GAAyBE,EAAOiB,GAJpCV,EAAAQ,EAAIlB,GAAAA,GAA8CG,EAAOiB,GAJzDV,EAAAQ,EAAInB,GAAAA,GAA4CI,EAAOiB,EAU3D,EAEF,EAAClB,CAAA,CAtDoB,GAuDtB,SAAAM,EA7C4BL,EAAUmB,GACnC,IAAMC,EAAkBb,EAAIC,KAAAhB,GAAAA,GAAQ6B,SAASrB,GAC7C,GDbuC,iBCaUoB,IDVjDE,QAAQC,MAFiB,0DCavB,OAAOD,QAAQC,MAAMhC,GACvB,IAAMiC,EAAgBL,EAAQM,YAC9BD,EAAc5H,UAAYwH,EAC1B7H,EAAS4H,EAASK,EACpB,CAAC,SAAApB,EAC0CJ,EAAUmB,GAAoBO,IAAAA,EACjEC,EAAiDD,OAAvCA,EAAGP,EAAQ9H,aAAa,iBAAeqI,EAAI,GAC3D,IDb2B,SAAI1B,EAAiB2B,GAGlD,IAFwB3B,EAAM4B,OAI5B,OADAN,QAAQC,MAFkB,mEAI5B,EAKA,IAAIM,EAAuCF,EAC3C,MAAiC,WAA7B3B,EAAM8B,qBAERD,EAAsBE,OAAOJ,GACRK,MAAMH,KAGzBP,QAAQC,MAFgB,iFAGjB,KAGkBvB,EAAMiC,eAAeC,SAASL,KAGzDP,QAAQC,MAFuB,iFAIjC,EAEF,CChBSY,CAA2C5B,EAACC,KAAIhB,GAAAA,GAASmC,GAC5D,OAAOL,QAAQC,MAAMhC,GACvB4B,EAAQiB,MAAMC,QAAU,GAAGrC,IAAY2B,EAAa,GAAK,MAC3D,CAAC,SAAAxB,EAC4CH,EAAgBmB,GAC3D,IAAMkB,EAAUrC,EAAQ,GAAK,OACzBmB,EAAQiB,MAAMC,UAAYA,IAC9BlB,EAAQiB,MAAMC,QAAUA,EAC1B,CAAC,SAAAnC,EACuBF,EAAiCmB,GACvD,GAAqB,iBAAVnB,EAAX,CACA,IAAMsC,EAAU,GAAMtC,EAClBmB,EAAQoB,cAAgBD,IAC5BnB,EAAQoB,YAAcD,GACxB,CCtCK,IA6FME,EACK,6CCxFUC,eAAAhD,EAAAiD,UAAAA,eAAAjD,EAAAkD,kBAAAA,eAAAlD,EAAA,sBAAAmD,eAAAnD,EAAA,YAAAoD,eAAApD,EAAAqD,MAAAA,eAAArD,aAAAsD,eAAAtD,EAAA,WAAAuD,eAAAvD,EAAAwD,WAAAA,eAAAxD,EAAAyD,mBAAAA,eAAAzD,EAAA,cAAA0D,eAAA1D,iBAEf2D,eAAK,WAkBhB,SAAAA,EAAAC,GAgBC,IAAAtC,EAAAP,KAfClH,EAAE+J,EAAF/J,GACAgK,EAAOD,EAAPC,QACA3C,EAAO0C,EAAP1C,QACA4C,EAAQF,EAARE,SACAlC,EAAQgC,EAARhC,SACAY,EAAcoB,EAAdpB,eACAuB,EAAQH,EAARG,SAAQ9H,OAAAuE,eAAAkD,KAAAA,EAAA7K,CAAAA,MAAAmL,IAAA/H,OAAAuE,eAAAO,KAAAiC,EAAAnC,CAAAA,UAAAhI,EAAAA,WAAAoD,IAAAA,OAAAuE,eAAAO,KAAAkC,EAAA,CAAApC,UAAA,EAAAhI,WAAAoD,IAAAA,OAAAuE,eAAA0C,KAAAA,GAAArC,UAAA,EAAAhI,WAAA,IAAAoD,OAAAuE,eAAA2C,KAAAA,EAAAtC,CAAAA,UAAAhI,EAAAA,eAAAoD,OAAAuE,eAAAO,KAAAqC,EAAA,CAAAvC,UAAAhI,EAAAA,WAAAoD,IAAAA,OAAAuE,oBAAA6C,EAAA,CAAAxC,UAAA,EAAAhI,WAAA,IAAAoD,OAAAuE,eAAA8C,KAAAA,EAAAzC,CAAAA,YAAAhI,WAAA,IAAAoD,OAAAuE,eAAAO,KAAAwC,EAAA1C,CAAAA,UAAAhI,EAAAA,WAbViL,IAAAA,KAAAA,gBAAQ7H,OAAAuE,eAAAO,KAAAyC,EAAA,CAAA3C,UAAAhI,EAAAA,WAER+I,IAAAA,KAAAA,cAAQ3F,EAAAA,OAAAuE,eAAAO,KAAA0C,EAAA5C,CAAAA,YAAAhI,WAAA,IAqBN,IAAMoL,EAAe/C,MAAAA,EAAAA,EAAWjK,SAAS0D,KACzC,IDkBc,SAACd,GAGjB,MAFkC,iBAAPA,GAGzBgI,QAAQC,MAFe,kDAGhB,KAEoB,KAAPjI,IAGpBgI,QAAQC,MAFiB,qDAGlB,GAGX,CChCSoC,CAA0BrK,GAAK,MAAM,IAAIsK,MAAMpB,GACpD,IDgCmB,SAAC7B,GAItB,SAHgCA,aAAmBkD,eAIjDvC,QAAQC,MAFR,mEAGO,EAGX,CCzCSoC,CAA+BD,GAAe,MAAM,IAAIE,MAAMpB,GAEnEjC,EAAAC,KAAIqC,GAAAA,GAAOvJ,EACXiH,EAAIC,KAAAsC,GAAAA,GAAYQ,EAChB/C,EAAIC,KAAAoC,GAAAA,GAAaY,MAAAA,GAAAA,EACjBjD,EAAAC,KAAIwC,GAAAA,GAAYU,EAChB,IAAMI,EAAqB,WACzB,GAAAvD,EAAIQ,EAAI6B,GAAAA,GAAY,CAClB,IAAMmB,EAAUC,aAAaC,QAAQ3K,GACrC,GAAgB,OAAZyK,EAAkB,OAAOG,KAAKC,MAAMJ,EAC1C,CACA,OAAOT,CACT,CAN2B,GAO3B/C,EAAAC,KAAIuC,GAAAA,GAAYe,EAChBtD,KAAK+C,SAAWA,MAAAA,EAAAA,EAAa,WAAK,EAElChD,EAAAC,KAAIiC,GAAAA,GAA6B,MAAlBR,EACf1B,EAAIC,KAAAkC,GAAAA,GAAmBT,MAAAA,EAAAA,EAAkB,GACzC,IAAMH,EAAuC,MAAlBG,ED/DY,SAACA,GAC1C,OAAIA,EAAemC,MAAM,SAACC,GAAE,MAAmB,iBAAPA,CAAe,GAAU,SAC7DpC,EAAemC,MAAM,SAACC,GAAO,MAAc,iBAAPA,CAAe,GAAU,SAC1D,SACT,CC4DQC,CAA4BrC,GAC5B,UAEJ,GADA1B,EAAIC,KAAAmC,GAAAA,GAAuBb,EACL,MAAlBG,EAAwB,CAC1B,ID/DwB,SAACA,EAAqCsC,GAGlE,OAFkBtC,aAA0BxB,MAMK,IAA1BwB,EAAejF,QAGpCsE,QAAQC,MAFgB,sEAGjB,KAEuB,YAATgD,GAAgC,WAATA,GAA8B,WAATA,KAIjEjD,QAAQC,MAFR,kFAIF,IAfED,QAAQC,MAFgB,4DAI1B,EAeF,CC0CWiD,CAA0CvC,EAAgBH,GAC7D,UAAU8B,MAAMpB,GAClB,ID3CsB,SAAIc,EAAYxB,GAG1C,eAF6BwB,IAAYxB,IAGvCR,QAAQC,MAFc,oDAAuDO,GAGtE,GAGX,CCmCW0C,CAAwClB,EAASxB,GACpD,UAAU8B,MAAMpB,EACpB,CACAjC,EAAIC,KAAAyC,GAAAA,GAAgC,MAAZ5B,EACxBb,KAAKa,SAAWA,MAAAA,EAAAA,EAAa,WAAS,MAAA,EAAA,EAEtCd,EAAAC,KAAI0C,GAAAA,GAAe,IAAInD,EAAWS,MAClCD,EAAAC,KAAI0C,GAAAA,GAAapC,eAAegD,EAClC,CAAC,QAAAW,EAAArB,EAAAvC,iBAAA4D,EAMDC,OAAA,SAAO1E,GACL,GAAAO,EAAIC,KAAIiC,GAAAA,KDjDe,SACzBzC,EACAiC,EACAH,GAIA,cAF6B9B,IAAU8B,GAGrCR,QAAQC,MAFc,4CAA+CO,IAIvE,KAC6BG,EAAeC,SAASlC,KAGnDsB,QAAQC,MAF0F,wEAMtG,CCiCSiD,CACCxE,EAAKO,EACLC,KAAIkC,GAAAA,GAAAnC,EACJC,KAAImC,GAAAA,IAGN,OAAOrB,QAAQC,MDEL,8CCAdhB,EAAIC,KAAA0C,GAAAA,GAAapC,eAAed,GAChCO,EAAIC,KAAA2C,GAAAA,GAAcnD,GAClBO,EAAIC,KAAIoC,GAAAA,IAAYoB,aAAaW,QAAOpE,EAACC,KAAIqC,GAAAA,GAAMqB,KAAKU,UAAU5E,GACpE,EAACyE,EACDI,MAAA,WACEtE,EAAAC,KAAI0C,GAAAA,GAAapC,eAAcP,EAACC,KAAIsC,GAAAA,IACpCvC,EAAIC,KAAA2C,GAAAA,GAAA5C,EAAcC,KAAIsC,GAAAA,IACtBvC,EAAIC,KAAIoC,GAAAA,IAAYoB,aAAac,WAAUvE,EAACC,KAAIqC,GAAAA,GAClD,IAACO,KAAA,CAAA,CAAAtH,IAAA,KAAAiJ,IAED,WACE,OAAAxE,EAAOC,KAAIqC,GAAAA,EACb,GAAC,CAAA/G,IAAA,UAAAiJ,IACD,WACE,OAAAxE,EAAOC,KAAIuC,GAAAA,EACb,IAACjH,IAAA,kBAAAiJ,IACD,WACE,OAAAxE,EAAOC,KAAIyC,GAAAA,EACb,GAACnH,CAAAA,aAAAiJ,IACD,WACE,OAAAxE,EAAOC,KAAIiC,GAAAA,EACb,GAAC,CAAA3G,IAAA,iBAAAiJ,IACD,WACE,OAAAxE,EAAOC,KAAIkC,GAAAA,EACb,GAAC,CAAA5G,IAAA,qBAAAiJ,IACD,WACE,OAAAxE,EAAOC,KAAImC,GAAAA,EACb,IAAC7G,IAAA,UAAAiJ,IACD,WACE,OAAAxE,EAAOC,KAAIwC,GAAAA,EACb,iPACD,CAtHiB,GAsHjB,SAAAS,EA/CczD,GACX,IAAMgF,EAASzE,EAAGC,KAAIuC,GAAAA,GACtBxC,EAAAC,KAAIuC,GAAAA,GAAY/C,EAChBQ,KAAK+C,SAASvD,EAAOgF,EACvB"}